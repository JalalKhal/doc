langage intérprété: interpreteur (couche supplémentaire qui fait le lien entre le projet et l'OS) 
qui prend le code source et produit une exécution du projet.

Lancement:
On utilise apache pour le serveur web:
->fichier de configuration httpd.conf dans Apache24/conf.
->lancer apache (Apache24/bin/httpd.exe).
->taper localhost pour accéder au site (les sites sont dans Apache24/htdocs).

Instalation de php:
->installer php (sur internet).
->si on est en local renommer php-developement.ini en php.ini et le déplacer vers Apache24
Différence entre php-developement et php-production, si fichier de configuration php-production
alors on ne voit pas les erreurs php sur le site (intéressant si site en ligne pour pas qu'un pirate
détecte des failles). php-developement, on voit les erreurs de php sur le site.

Dans httpd.conf
Options Indexes FollowSymLinks
-->Indexes permet de lister le contenu d'un repértoire si le serveur ne trouve pas de fichier d'indexe (les différents fichiers).
-->FollowSymLinks liens symboliques.

AllowOverride None
-->utile pour les fichiers .htacess (None ne permet pas de modifier la configuration, All si)

Require all granted
-->site accès pour tous les utilisateurs.

<IfModule dir_module>
    DirectoryIndex index.html index.php ...
</IfModule>
--> dir_module, module apache qui permet de pouvoir mettre index.html comme point d'entrée si il existe puis index.php si il existe... du directory parent.

PHP:
<?php
...code php
?>
Attention si code html on ferme la balise sinon on la ferme pas, car php parse les données et déduit en fonction
de si la balise php et fermée ou non
Commentaires: // sur une seule ligne /* ----contenu----*/

Séance 1: Affichage
echo Mon Affichage;
-->structure echo (pas une fonction):afficher Mon Affichage à l'écran.

print Mon Affichage
-->structure print, même chose que echo sauf que print peut être utilisée dans un contexte de fonction.

. concaténation
vardump(maVariable)
display informations about maVariable
gettype(maVariable)
function which return the type of maVaraiable

Constantes:
1ère méthode
define("NOMCONSTANTE",valeur);
-->NOMCONSTANTE affectée à valeur, immuable, valeur récupérer la valeur d'une variable.

2ème méthode:
const NOMCONSTANTE=valeur
-->meme chose que pour la 1ère méthode. Plus limité que la 1ère méthode, privilégier la 1ère méthode.

Opérateurs:
-->+,-,/,*,**,op=
ou op appartient à {.,*,+,-,%}
%
14%26
fmod(14,26)
-->modulo

and ou &&, or ou ||,xor

===
--égalité en valeur ET en type
!==
-->différence de valeur OU différence de type 

Conditions:
if(condition){
instructions;
}elseif(condition){
	instructions;
}
...
else{
instructions;
}

$message=($jeu_lance) ? "Jeu en route": "Jeu eteint"
-->message vaut Jeu en route si $jeu_lance= True, vaut "Jeu eteint" sinon.
	
switch ($i) {
    case "apple":
        echo "i est une pomme";
        break;
    case "bar":
        echo "i est une barre";
        break;
    case "cake":
        echo "i est un gateau";
    default:
    	echo "Autres cas"; 
    	break;
}

unset($maVariable);
-->met $maVariable à NULL

isset($maVariable)
-->renvoie true si $maVariable!=NULL, false sinon.

$res=$maVariable ?? "Elle n'existe pas";
-->si $maVariable existe $res=$maVariable, sinon $res="Elle n'existe pas";

boucles:
while(condition){
instructions;
}

do{
instructions;
}
while(conditions);

for($i=0;$i<10;$i++){
	for($i=0;$i<10;$i++){
		for($i=0;$i<10;$i++){
			break 2;// interrompt la boucle courante +la boucle d'après
				//on peut mettre 1,3...
			continue;// on revient au début de la boucle
		}
	}
}

Fonctions:
function nomFonction($param1,$param2,&$param3, int $number,bool $bool1,$var2=5):type de retour(par ex int)
{
	instructions;
	return $retour;
}
-->passage par valeur: $nomParametre, passage par référence, &$nomParametre
on peut spécifier le type, puis paramètre non obligatoire $var2.

function nomFonction(..$lotOfVariables)
{
	foreach($lotOfVariables as $data){
		echo $data;
	}
}
-->syntaxe pour nombre de paramètres arbitraires.On peut spécifier le type (par ex tab de int int...$lotOfVariables)

$variableFonction=function()
{
	...
	return $retour;
}
-->stocker fonction dans une variable (on  l'apelle avec $variableFonction()).

Tableaux:
$tab_integers=[
	10,
	11,
	12,
	13,
	14
];
var_dump($tab_integers);
-->affichage couple clé valeur.

$tab_integers=[
	cle1 => 10,
	cle2 => 11, 
	cle3 => date("Y-m-d),
	cle4 => "bonjour",
	cle5 => 3.14698
];
-->tableau prend tout type de données avec système clé valeur, accès comme dictionnaire python.

foreach($tab_integers as $key => $value ){
		...;
}

print_r($nomTableau)
-->affiche le tableau de manière lisible.

Gestions des erreurs:
error_reporting(0 ou -1)
-->-1 gère toutes les  erreurs, 0 ne gère pas les erreurs du tout (LE GESTIONNAIRE D'ERREURS PHP PAS NOTRE GESTIONNAIRE SI IL EXISTE).

ini_set("diplay_errors",0 ou 1);
-->0 on affiche pas, 1 sinon.

$my_error_handler=function(int $errno,string $errmsg,string $errfile,int $errline)
{
	switch($errno){
		case E_USER_ERROR:
			echo $errmsg;
		case E_USER_WARNING:
			echo $errmsg."sur le fichier".$errfile;
		case E_USER_NOTICE:
			echo $errmsg;
		default:
			echo "ERREUR".$errmsg;
			break;
	}

};
-->paramètres int $errno,string $errmsg,[string $errfile],[int $errline],[array $errdatas] ([] facultatif).
$errno: gère le type d'erreur (E_USER_ERROR, E_USER_WARNING, E_USER_NOTICE,AUTRES CAS): Erreur, Alerte, Avertissement,Les autres cas.
$errmsg:gère le message d'erreur
$errfile: fichier source ou il y a l'erreur.
$errline=la ligne ou il y a l'erreur.

set_error_handler($my_error_handler);
-->fonction qui prend une callback qui est notre gestionnaire d'erreurs $my_error_handler.

$age=16;
if($age<0)
{
trigger_error("l'âge non valide",E_USER_WARNING);
}
-->trigger_error déclenche une erreur du type qu'on veut (WARNING,NOTICE,ERROR) et $errmsg="l'âge non valide" puis notre gestionnaire la gère selon son type.

error_log("Problème qu'on signale dans les log",1,email_pour_envoyer_l'erreur);
-->envoyer un email si 2ème paramètre=1 ou 2ème paramètre=3 (enregistre un fichier qui est transmis à la place de l'email (3ème paramètre)).

Fichiers:
$myFile=fopen(chemin,mode)
-->ouvre le fichier et mode comme le C (r,r+,w,w+,rb,rb+,...) b en mode binaire, mettre toujours le + à la fin.Renvoie true si l'ouverture a réussi, false sinon.

fclose($myFile)
-->ferme le fichier.Renvoie true si la fermeture a réussi, false sinon.

$car=fgetc($myFile)
-->Retourne le caractère courant et déplace l'offset du fichier de 1 comme en C. Retourne false si on est à la fin du fichier.

$bool=feof($myFile)
-->retourne true si on est arriver à la fin du fichier, false sinon.

$str=fgets($myFile,[$number_caracter])
-->lit une ligne du fichier ou un nombre de caractère si $number_caracter transmis.

fwrite($myFile,"La nouvelle donnée à écrire");
-->écrit dans le fichier le texte spécifié.


$infos=file(chemin)
-->renvoie les infos du fichier spécifié par chemin sous forme de tableau).Renvoie true si c'est réussi, false sinon.

Formulaire HTML:
Dans index.php:
<!DOCTYPE html>
<html lang="fr">
<head>
	<meta charset="UTF-8">
	<title>Formulaire HTML</title>
</head>
<body>
	<h1>Saisie d'informations</h1>
	<form method="get" action="result.php>
		<p><label for="iduser">Utilisateur :</label> <input type="text" id="iduser" name="user"></p>
		<p><label for="idchoice">Choix :</label> <input type="radio" name="choice" id="idchoice" value="oui">Oui
		<input type="radio" name="choice" id="idchoice" value="non">Non</p>
		<p><input type="submit" name="valid_form" value="Valider"></p>
	</form>
</body>
</html>

Dans result.php:
<p><a href="index.php">&laquo;Retour au formulaire</a></p>
						
<?php
/* Variables superglobales: $_GET-->tableau
			    $_POST-->tableau
différence entre POST et GET: POST récupère les informations no visible dans l'url.
URL en GET: http://localhost/result.php?param1=valeur1&param2=valeur2&...
liste les paramètres transmis à l'URL.
-->Attention on peut mettre du code javascript sur l'url passé comme paramètre et php l'exécute comme du code js
Résolution:htmlspecialchars qui interpréte le code js/HTML en texte.


*/
error_reporting(-1);
ini_set("diplay_errors",1);
print_r(htmlspecialchars($_GET));
?>

isset($maVariable)
-->Vérifie qu'une variable existe et est non nulle.

empty($maVariable)
-->Vérifie qu'une variable est vide. Une variable est considérée comme vide si elle n'existe pas,
ou si sa valeur équivaut à false.

is_null($maVariable)
-->renvoie true si $maVariable n'existe pas ou vaut null,false sinon.

Programmation modulaire:
include
-->inclut le contenu d'un fichier dans un autre comme dans C, si erreur déclenchement d'alerte.

include_once
-->même chose que include + vérification si le fichier a été déjà inclus.

require
-->même chose sauf en cas d'erreur déclenchement d'erreur donc stop le script.

require_once
-->même chose que require + vérification si le fichier a été déjà inclus.

Cookies:
cookies en php--> fichier texte enregistré pour un ou plusieurs utilisateurs.

setcookie(nomCookie,valeur_cookie,date_expiration_cookie,
chemin_du_cookie,nom_domaine_du_cookie,bool_https?,bool_http_or_javascript);
-->doit être appelée avant tout code HTML et espace blanc.
bool_https?=true si https, false sinon
bool_http_or_javascript=true si accès cookie en http, false si accès en javascript.
création d'un cookie.

$_COOKIE
-->variable superglobale pour récupérer les informations des cookies (comme $_GET).

echo htmlspecialchars($_COOKIE[nomCookie]);
-->affiche valeurCookie pour le cookie nomCookie avec protection d'injection javascript.

Sessions:
Comme les cookies mais plus sécurisées.
Session:temps limité, le temps que l'utilisateur est connecté.

$_SESSION
-->variable superglobale pour traiter les sessions.

session_start();
-->démarre la session ou restaure une existante, comme setcookie, doit être appelée avant tout code HTML et espace blanc.

session_id();
-->récupère l'id de la session courante, ou renvoie false si elle n'existe pas.

$_SESSION["username"]="jaja";
$_SESSION[cle2]=valeur2;
...
-->intègre des données (clé,valeur) pour la session courante.

unset($_SESSION["username"]);
-->supprime la donnée "username"=>"jaja"

session_unset();
-->supprimer toutes les variables de la session courantes.

session_status()
-->Retourne 0(PHP_SESSION_DISABLED)-->les sessions sont désactivées complètement.
   Retourne 1(PHP_SESSION_NONE)-->session non active.
   Retourne 2(PHP_SESSION_ACTIVE)-->session active.

header("Location: index.php");
-->Redirection php vers index.php(redirection locale sinon ça marche pas) et doit être mis avant tout code HTML.

session_destroy();
-->ferme la session. Ne supprime pas le cookie de la session.

Configuration session dans php.ini:
; Lifetime in seconds of cookie or, if 0, until browser is restarted.
; https://php.net/session.cookie-lifetime
session.cookie_lifetime = 0

;On stocke les sessions en tant que cookies (c'est pour ça qu'on met 1).
session.use_cookies = 1
;on force l'utilisation des sessions avec des cookies.
session.use_only_cookies = 1

;Empêche l'utilisation d'une session avec identifiant non initialisé 1 pour ça,0 sinon.
session.use_strict_mode = 1

;Supprime la possibilité d'injecter un identifiant de session.
session.use_trans_sid = 0

;nocache pour ne pas mettre en cache la session.
session.cache_limiter = nocache

;hachage de l'identifiant avec sha256.
session.hash_function="sha256"

Programmation objet:
class Vehicle
{
	private $_name;
	public $_age;
	public static $maVariableStatique="MySQL";
	public function __construct(string $name,int $age)
	{
		echo "Je suis construit";
		$this->_name=$name;
		$this->_age=$age;
		//$this fait référence à l'instance courante.

	}
	public function __destruct()
	{//méthode quand on détruit une instance de la classe.
		echo "Je suis détruit";
	}
	public function maMethode()
	{
		echo "Je suis dans maMethode!";

	}
	public static function maMethodeStatique()
	{
		echo "Je suis dans maMethodeStatique!";

	}
	
	
	public function getName():string
	{//accesseurs comme méthodes de la classe.
		return $this->_name;

	}
	public function setName($name)
	{
		$this->_name=$name;
	}
}
$obj1=new Vehicle("obj1",5);
$name="Vehicle";
$obj2=$name("obj2",12);//ça marche!
echo $obj1->_name."<br>";
$obj1->maMethode();
Vehicle::maMethodeStatique();
echo Vehicle::$maVariableStatique;




